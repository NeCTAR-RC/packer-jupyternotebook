# Configuration file for jupyter-notebook.

#------------------------------------------------------------------------------
# Application(SingletonConfigurable) configuration
#------------------------------------------------------------------------------

## This is an application.

## The date format used by logging formatters for %(asctime)s
{% if jupyter_notebook_application_log_datefmt is defined %}
c.Application.log_datefmt = '{{ jupyter_notebook_application_log_datefmt }}'
{% else %}
#c.Application.log_datefmt = '%Y-%m-%d %H:%M:%S'
{% endif %}

## The Logging format template
{% if jupyter_notebook_application_log_format is defined %}
c.Application.log_format = '{{ jupyter_notebook_application_log_format }}'
{% else %}
#c.Application.log_format = '[%(name)s]%(highlevel)s %(message)s'
{% endif %}

## Set the log level by value or name.
{% if jupyter_notebook_application_log_level is defined %}
c.Application.log_level = {{ jupyter_notebook_application_log_level }}
{% else %}
#c.Application.log_level = 30
{% endif %}

#------------------------------------------------------------------------------
# JupyterApp(Application) configuration
#------------------------------------------------------------------------------

## Base class for Jupyter applications

## Answer yes to any prompts.
{% if jupyter_notebook_jupyterapp_answer_yes is defined %}
c.JupyterApp.answer_yes = {{ jupyter_notebook_jupyterapp_answer_yes | bool }}
{% else %}
#c.JupyterApp.answer_yes = False
{% endif %}

## Full path of a config file.
{% if jupyter_notebook_jupyterapp_config_file is defined %}
c.JupyterApp.config_file = '{{ jupyter_notebook_jupyterapp_config_file }}'
{% else %}
#c.JupyterApp.config_file = ''
{% endif %}

## Specify a config file to load.
{% if jupyter_notebook_jupyterapp_config_file is defined %}
c.JupyterApp.config_file = '{{ jupyter_notebook_jupyterapp_config_file }}'
{% else %}
#c.JupyterApp.config_file = ''
{% endif %}

## Generate default config file.
{% if jupyter_notebook_jupyterapp_generate_config is defined %}
c.JupyterApp.generate_config = {{ jupyter_notebook_jupyterapp_generate_config | bool }}
{% else %}
#c.JupyterApp.generate_config = False
{% endif %}

#------------------------------------------------------------------------------
# NotebookApp(JupyterApp) configuration
#------------------------------------------------------------------------------

## Set the Access-Control-Allow-Credentials: true header
{% if jupyter_notebook_notebookapp_allow_credentials is defined %}
c.NotebookApp.allow_credentials = {{ jupyter_notebook_notebookapp_allow_credentials | bool }}
{% else %}
#c.NotebookApp.allow_credentials = False
{% endif %}

## Set the Access-Control-Allow-Origin header
#  
#  Use '*' to allow any origin to access your server.
#  
#  Takes precedence over allow_origin_pat.
{% if jupyter_notebook_notebookapp_allow_origin is defined %}
c.NotebookApp.allow_origin = '{{ jupyter_notebook_notebookapp_allow_origin }}'
{% else %}
#c.NotebookApp.allow_origin = ''
{% endif %}

## Use a regular expression for the Access-Control-Allow-Origin header
#  
#  Requests from an origin matching the expression will get replies with:
#  
#      Access-Control-Allow-Origin: origin
#  
#  where `origin` is the origin of the request.
#  
#  Ignored if allow_origin is set.
{% if jupyter_notebook_notebookapp_allow_origin is defined %}
c.NotebookApp.allow_origin = '{{ jupyter_notebook_notebookapp_allow_origin }}'
{% else %}
#c.NotebookApp.allow_origin = ''
{% endif %}

## Whether to allow the user to run the notebook as root.
{% if jupyter_notebook_notebookapp_allow_root is defined %}
c.NotebookApp.allow_root = {{ jupyter_notebook_notebookapp_allow_root | bool }}
{% else %}
#c.NotebookApp.allow_root = False
{% endif %}

## DEPRECATED use base_url
{% if jupyter_notebook_notebookapp_base_project_url is defined %}
c.NotebookApp.base_project_url = '{{ jupyter_notebook_notebookapp_base_project_url }}'
{% else %}
#c.NotebookApp.base_project_url = '/'
{% endif %}

## The base URL for the notebook server.
#  
#  Leading and trailing slashes can be omitted, and will automatically be added.
{% if jupyter_notebook_notebookapp_base_url is defined %}
c.NotebookApp.base_url = '{{ jupyter_notebook_notebookapp_base_url }}'
{% else %}
#c.NotebookApp.base_url = '/'
{% endif %}

## Specify what command to use to invoke a web browser when opening the notebook.
#  If not specified, the default browser will be determined by the `webbrowser`
#  standard library module, which allows setting of the BROWSER environment
#  variable to override it.
{% if jupyter_notebook_notebookapp_browser is defined %}
c.NotebookApp.browser = '{{ jupyter_notebook_notebookapp_browser }}'
{% else %}
#c.NotebookApp.browser = ''
{% endif %}

## The full path to an SSL/TLS certificate file.
{% if jupyter_notebook_notebookapp_certfile is defined %}
c.NotebookApp.certfile = '{{ jupyter_notebook_notebookapp_certfile }}'
{% else %}
#c.NotebookApp.certfile = ''
{% endif %}

## The full path to a certificate authority certificate for SSL/TLS client
#  authentication.
{% if jupyter_notebook_notebookapp_client_ca is defined %}
c.NotebookApp.client_ca = '{{ jupyter_notebook_notebookapp_client_ca }}'
{% else %}
#c.NotebookApp.client_ca = ''
{% endif %}

## The config manager class to use
{% if jupyter_notebook_notebookapp_config_manager_class is defined %}
c.NotebookApp.config_manager_class = '{{ jupyter_notebook_notebookapp_config_manager_class }}'
{% else %}
#c.NotebookApp.config_manager_class = 'notebook.services.config.manager.ConfigManager'
{% endif %}

## The notebook manager class to use.
{% if jupyter_notebook_notebookapp_contents_manager_class is defined %}
c.NotebookApp.contents_manager_class = '{{ jupyter_notebook_notebookapp_contents_manager_class }}'
{% else %}
#c.NotebookApp.contents_manager_class = 'notebook.services.contents.largefilemanager.LargeFileManager'
{% endif %}

## Extra keyword arguments to pass to `set_secure_cookie`. See tornado's
#  set_secure_cookie docs for details.
{% if jupyter_notebook_notebookapp_cookie_options is defined %}
c.NotebookApp.cookie_options = {{ jupyter_notebook_notebookapp_cookie_options }}
{% else %}
#c.NotebookApp.cookie_options = {}
{% endif %}

## The random bytes used to secure cookies. By default this is a new random
#  number every time you start the Notebook. Set it to a value in a config file
#  to enable logins to persist across server sessions.
#  
#  Note: Cookie secrets should be kept private, do not share config files with
#  cookie_secret stored in plaintext (you can read the value from a file).
{% if jupyter_notebook_notebookapp_cookie_secret is defined %}
c.NotebookApp.cookie_secret = b'{{ jupyter_notebook_notebookapp_cookie_secret }}'
{% else %}
#c.NotebookApp.cookie_secret = b''
{% endif %}

## The file where the cookie secret is stored.
{% if jupyter_notebook_notebookapp_cookie_secret is defined %}
c.NotebookApp.cookie_secret = b'{{ jupyter_notebook_notebookapp_cookie_secret }}'
{% else %}
#c.NotebookApp.cookie_secret = b''
{% endif %}

## The default URL to redirect to from `/`
{% if jupyter_notebook_notebookapp_default_url is defined %}
c.NotebookApp.default_url = '{{ jupyter_notebook_notebookapp_default_url }}'
{% else %}
#c.NotebookApp.default_url = '/tree'
{% endif %}

## Disable cross-site-request-forgery protection
#  
#  Jupyter notebook 4.3.1 introduces protection from cross-site request
#  forgeries, requiring API requests to either:
#  
#  - originate from pages served by this server (validated with XSRF cookie and
#  token), or - authenticate with a token
#  
#  Some anonymous compute resources still desire the ability to run code,
#  completely without authentication. These services can disable all
#  authentication and security checks, with the full knowledge of what that
#  implies.
{% if jupyter_notebook_notebookapp_disable_check_xsrf is defined %}
c.NotebookApp.disable_check_xsrf = {{ jupyter_notebook_notebookapp_disable_check_xsrf | bool }}
{% else %}
#c.NotebookApp.disable_check_xsrf = False
{% endif %}

## Whether to enable MathJax for typesetting math/TeX
#  
#  MathJax is the javascript library Jupyter uses to render math/LaTeX. It is
#  very large, so you may want to disable it if you have a slow internet
#  connection, or for offline use of the notebook.
#  
#  When disabled, equations etc. will appear as their untransformed TeX source.
{% if jupyter_notebook_notebookapp_enable_mathjax is defined %}
c.NotebookApp.enable_mathjax = {{ jupyter_notebook_notebookapp_enable_mathjax | bool }}
{% else %}
#c.NotebookApp.enable_mathjax = True
{% endif %}

## extra paths to look for Javascript notebook extensions
{% if jupyter_notebook_notebookapp_extra_nbextensions_path is defined %}
c.NotebookApp.extra_nbextensions_path = {{ jupyter_notebook_notebookapp_extra_nbextensions_path }}
{% else %}
#c.NotebookApp.extra_nbextensions_path = []
{% endif %}

## Extra paths to search for serving static files.
#  
#  This allows adding javascript/css to be available from the notebook server
#  machine, or overriding individual files in the IPython
{% if jupyter_notebook_notebookapp_extra_static_paths is defined %}
c.NotebookApp.extra_static_paths = {{ jupyter_notebook_notebookapp_extra_static_paths }}
{% else %}
#c.NotebookApp.extra_static_paths = []
{% endif %}

## Extra paths to search for serving jinja templates.
#  
#  Can be used to override templates from notebook.templates.
{% if jupyter_notebook_notebookapp_extra_template_paths is defined %}
c.NotebookApp.extra_template_paths = {{ jupyter_notebook_notebookapp_extra_template_paths }}
{% else %}
#c.NotebookApp.extra_template_paths = []
{% endif %}

## 
{% if jupyter_notebook_notebookapp_file_to_run is defined %}
c.NotebookApp.file_to_run = '{{ jupyter_notebook_notebookapp_file_to_run }}'
{% else %}
#c.NotebookApp.file_to_run = ''
{% endif %}

## Deprecated: Use minified JS file or not, mainly use during dev to avoid JS
#  recompilation
{% if jupyter_notebook_notebookapp_ignore_minified_js is defined %}
c.NotebookApp.ignore_minified_js = {{ jupyter_notebook_notebookapp_ignore_minified_js | bool }}
{% else %}
#c.NotebookApp.ignore_minified_js = False
{% endif %}

## (bytes/sec) Maximum rate at which stream output can be sent on iopub before
#  they are limited.
{% if jupyter_notebook_notebookapp_iopub_data_rate_limit is defined %}
c.NotebookApp.iopub_data_rate_limit = {{ jupyter_notebook_notebookapp_iopub_data_rate_limit }}
{% else %}
#c.NotebookApp.iopub_data_rate_limit = 1000000
{% endif %}

## (msgs/sec) Maximum rate at which messages can be sent on iopub before they are
#  limited.
{% if jupyter_notebook_notebookapp_iopub_msg_rate_limit is defined %}
c.NotebookApp.iopub_msg_rate_limit = {{ jupyter_notebook_notebookapp_iopub_msg_rate_limit }}
{% else %}
#c.NotebookApp.iopub_msg_rate_limit = 1000
{% endif %}

## The IP address the notebook server will listen on.
{% if jupyter_notebook_notebookapp_ip is defined %}
c.NotebookApp.ip = '{{ jupyter_notebook_notebookapp_ip }}'
{% else %}
#c.NotebookApp.ip = 'localhost'
{% endif %}

## Supply extra arguments that will be passed to Jinja environment.
{% if jupyter_notebook_notebookapp_jinja_environment_options is defined %}
c.NotebookApp.jinja_environment_options = {{ jupyter_notebook_notebookapp_jinja_environment_options }}
{% else %}
#c.NotebookApp.jinja_environment_options = {}
{% endif %}

## Extra variables to supply to jinja templates when rendering.
{% if jupyter_notebook_notebookapp_jinja_template_vars is defined %}
c.NotebookApp.jinja_template_vars = {{ jupyter_notebook_notebookapp_jinja_template_vars }}
{% else %}
#c.NotebookApp.jinja_template_vars = {}
{% endif %}

## The kernel manager class to use.
{% if jupyter_notebook_notebookapp_kernel_manager_class is defined %}
c.NotebookApp.kernel_manager_class = '{{ jupyter_notebook_notebookapp_kernel_manager_class }}'
{% else %}
#c.NotebookApp.kernel_manager_class = 'notebook.services.kernels.kernelmanager.MappingKernelManager'
{% endif %}

## The kernel spec manager class to use. Should be a subclass of
#  `jupyter_client.kernelspec.KernelSpecManager`.
#  
#  The Api of KernelSpecManager is provisional and might change without warning
#  between this version of Jupyter and the next stable one.
{% if jupyter_notebook_notebookapp_kernel_spec_manager_class is defined %}
c.NotebookApp.kernel_spec_manager_class = '{{ jupyter_notebook_notebookapp_kernel_spec_manager_class }}'
{% else %}
#c.NotebookApp.kernel_spec_manager_class = 'jupyter_client.kernelspec.KernelSpecManager'
{% endif %}

## The full path to a private key file for usage with SSL/TLS.
{% if jupyter_notebook_notebookapp_keyfile is defined %}
c.NotebookApp.keyfile = '{{ jupyter_notebook_notebookapp_keyfile }}'
{% else %}
#c.NotebookApp.keyfile = ''
{% endif %}

## The login handler class to use.
{% if jupyter_notebook_notebookapp_login_handler_class is defined %}
c.NotebookApp.login_handler_class = '{{ jupyter_notebook_notebookapp_login_handler_class }}'
{% else %}
#c.NotebookApp.login_handler_class = 'notebook.auth.login.LoginHandler'
{% endif %}

## The logout handler class to use.
{% if jupyter_notebook_notebookapp_logout_handler_class is defined %}
c.NotebookApp.logout_handler_class = '{{ jupyter_notebook_notebookapp_logout_handler_class }}'
{% else %}
#c.NotebookApp.logout_handler_class = 'notebook.auth.logout.LogoutHandler'
{% endif %}

## The MathJax.js configuration file that is to be used.
{% if jupyter_notebook_notebookapp_mathjax_config is defined %}
c.NotebookApp.mathjax_config = '{{ jupyter_notebook_notebookapp_mathjax_config }}'
{% else %}
#c.NotebookApp.mathjax_config = 'TeX-AMS-MML_HTMLorMML-full,Safe'
{% endif %}

## A custom url for MathJax.js. Should be in the form of a case-sensitive url to
#  MathJax, for example:  /static/components/MathJax/MathJax.js
{% if jupyter_notebook_notebookapp_mathjax_url is defined %}
c.NotebookApp.mathjax_url = '{{ jupyter_notebook_notebookapp_mathjax_url }}'
{% else %}
#c.NotebookApp.mathjax_url = ''
{% endif %}

## Dict of Python modules to load as notebook server extensions.Entry values can
#  be used to enable and disable the loading ofthe extensions. The extensions
#  will be loaded in alphabetical order.
{% if jupyter_notebook_notebookapp_nbserver_extensions is defined %}
c.NotebookApp.nbserver_extensions = {{ jupyter_notebook_notebookapp_nbserver_extensions }}
{% else %}
#c.NotebookApp.nbserver_extensions = {}
{% endif %}

## The directory to use for notebooks and kernels.
{% if jupyter_notebook_notebookapp_notebook_dir is defined %}
c.NotebookApp.notebook_dir = '{{ jupyter_notebook_notebookapp_notebook_dir }}'
{% else %}
#c.NotebookApp.notebook_dir = ''
{% endif %}

## Whether to open in a browser after starting. The specific browser used is
#  platform dependent and determined by the python standard library `webbrowser`
#  module, unless it is overridden using the --browser (NotebookApp.browser)
#  configuration option.
{% if jupyter_notebook_notebookapp_open_browser is defined %}
c.NotebookApp.open_browser = {{ jupyter_notebook_notebookapp_open_browser | bool }}
{% else %}
#c.NotebookApp.open_browser = True
{% endif %}

## Hashed password to use for web authentication.
#  
#  To generate, type in a python/IPython shell:
#  
#    from notebook.auth import passwd; passwd()
#  
#  The string should be of the form type:salt:hashed-password.

## Forces users to use a password for the Notebook server. This is useful in a
#  multi user environment, for instance when everybody in the LAN can access each
#  other's machine through ssh.
#  
#  In such a case, server the notebook server on localhost is not secure since
#  any user can connect to the notebook server via ssh.
{% if jupyter_notebook_notebookapp_password is defined %}
c.NotebookApp.password = '{{ jupyter_notebook_notebookapp_password }}'
{% else %}
#c.NotebookApp.password = ''
{% endif %}

## The port the notebook server will listen on.
{% if jupter_notebook_port is defined %}
c.NotebookApp.port = {{ jupter_notebook_port }}
{% else %}
c.NotebookApp.port = 8888
{% endif %}

## The number of additional ports to try if the specified port is not available.
{% if jupyter_notebook_notebookapp_port_retries is defined %}
c.NotebookApp.port_retries = {{ jupyter_notebook_notebookapp_port_retries }}
{% else %}
#c.NotebookApp.port_retries = 50
{% endif %}

## DISABLED: use %pylab or %matplotlib in the notebook to enable matplotlib.
{% if jupyter_notebook_notebookapp_pylab is defined %}
c.NotebookApp.pylab = '{{ jupyter_notebook_notebookapp_pylab }}'
{% else %}
#c.NotebookApp.pylab = 'disabled'
{% endif %}

## (sec) Time window used to  check the message and data rate limits.
{% if jupyter_notebook_notebookapp_rate_limit_window is defined %}
c.NotebookApp.rate_limit_window = {{ jupyter_notebook_notebookapp_rate_limit_window }}
{% else %}
#c.NotebookApp.rate_limit_window = 3
{% endif %}

## Reraise exceptions encountered loading server extensions?
{% if jupyter_notebook_notebookapp_reraise_server_extension_failures is defined %}
c.NotebookApp.reraise_server_extension_failures = {{ jupyter_notebook_notebookapp_reraise_server_extension_failures | bool }}
{% else %}
#c.NotebookApp.reraise_server_extension_failures = False
{% endif %}

## DEPRECATED use the nbserver_extensions dict instead
{% if jupyter_notebook_notebookapp_server_extensions is defined %}
c.NotebookApp.server_extensions = {{ jupyter_notebook_notebookapp_server_extensions }}
{% else %}
#c.NotebookApp.server_extensions = []
{% endif %}

## The session manager class to use.
{% if jupyter_notebook_notebookapp_session_manager_class is defined %}
c.NotebookApp.session_manager_class = '{{ jupyter_notebook_notebookapp_session_manager_class }}'
{% else %}
#c.NotebookApp.session_manager_class = 'notebook.services.sessions.sessionmanager.SessionManager'
{% endif %}

## Supply SSL options for the tornado HTTPServer. See the tornado docs for
#  details.
{% if jupyter_notebook_notebookapp_ssl_options is defined %}
c.NotebookApp.ssl_options = {{ jupyter_notebook_notebookapp_ssl_options }}
{% else %}
#c.NotebookApp.ssl_options = {}
{% endif %}

## Supply overrides for terminado. Currently only supports "shell_command".
{% if jupyter_notebook_notebookapp_terminado_settings is defined %}
c.NotebookApp.terminado_settings = {{ jupyter_notebook_notebookapp_terminado_settings }}
{% else %}
#c.NotebookApp.terminado_settings = {}
{% endif %}

## Token used for authenticating first-time connections to the server.
#  
#  When no password is enabled, the default is to generate a new, random token.
#  
#  Setting to an empty string disables authentication altogether, which is NOT
#  RECOMMENDED.
{% if jupyter_notebook_notebookapp_token is defined %}
c.NotebookApp.token = '{{ jupyter_notebook_notebookapp_token }}'
{% else %}
#c.NotebookApp.token = '<generated>'
{% endif %}

## Supply overrides for the tornado.web.Application that the Jupyter notebook
#  uses.
{% if jupyter_notebook_notebookapp_tornado_settings is defined %}
c.NotebookApp.tornado_settings = {{ jupyter_notebook_notebookapp_tornado_settings }}
{% else %}
#c.NotebookApp.tornado_settings = {}
{% endif %}

## Whether to trust or not X-Scheme/X-Forwarded-Proto and X-Real-Ip/X-Forwarded-
#  For headerssent by the upstream reverse proxy. Necessary if the proxy handles
#  SSL
{% if jupyter_notebook_notebookapp_trust_xheaders is defined %}
c.NotebookApp.trust_xheaders = {{ jupyter_notebook_notebookapp_trust_xheaders | bool }}
{% else %}
#c.NotebookApp.trust_xheaders = False
{% endif %}

## DEPRECATED, use tornado_settings
{% if jupyter_notebook_notebookapp_webapp_settings is defined %}
c.NotebookApp.webapp_settings = {{ jupyter_notebook_notebookapp_webapp_settings }}
{% else %}
#c.NotebookApp.webapp_settings = {}
{% endif %}

## Specify Where to open the notebook on startup. This is the
#  `new` argument passed to the standard library method `webbrowser.open`.
#  The behaviour is not guaranteed, but depends on browser support. Valid
#  values are:
#      2 opens a new tab,
#      1 opens a new window,
#      0 opens in an existing window.
#  See the `webbrowser.open` documentation for details.
{% if jupyter_notebook_notebookapp_webbrowser_open_new is defined %}
c.NotebookApp.webbrowser_open_new = {{ jupyter_notebook_notebookapp_webbrowser_open_new }}
{% else %}
#c.NotebookApp.webbrowser_open_new = 2
{% endif %}

## Set the tornado compression options for websocket connections.
#  
#  This value will be returned from
#  :meth:`WebSocketHandler.get_compression_options`. None (default) will disable
#  compression. A dict (even an empty one) will enable compression.
#  
#  See the tornado docs for WebSocketHandler.get_compression_options for details.
{% if jupyter_notebook_notebookapp_websocket_compression_options is defined %}
c.NotebookApp.websocket_compression_options = {{ jupyter_notebook_notebookapp_websocket_compression_options }}
{% else %}
#c.NotebookApp.websocket_compression_options = None
{% endif %}

## The base URL for websockets, if it differs from the HTTP server (hint: it
#  almost certainly doesn't).
#  
#  Should be in the form of an HTTP origin: ws[s]://hostname[:port]
{% if jupyter_notebook_notebookapp_websocket_url is defined %}
c.NotebookApp.websocket_url = '{{ jupyter_notebook_notebookapp_websocket_url }}'
{% else %}
#c.NotebookApp.websocket_url = ''
{% endif %}

#------------------------------------------------------------------------------
# ConnectionFileMixin(LoggingConfigurable) configuration
#------------------------------------------------------------------------------

## Mixin for configurable classes that work with connection files

## JSON file in which to store connection info [default: kernel-<pid>.json]
#  
#  This file will contain the IP, ports, and authentication key needed to connect
#  clients to this kernel. By default, this file will be created in the security
#  dir of the current profile, but can be specified by absolute path.
{% if jupyter_notebook_connectionfilemixin_connection_file is defined %}
c.ConnectionFileMixin.connection_file = '{{ jupyter_notebook_connectionfilemixin_connection_file }}'
{% else %}
#c.ConnectionFileMixin.connection_file = ''
{% endif %}

## set the control (ROUTER) port [default: random]
{% if jupyter_notebook_connectionfilemixin_control_port is defined %}
c.ConnectionFileMixin.control_port = {{ jupyter_notebook_connectionfilemixin_control_port }}
{% else %}
#c.ConnectionFileMixin.control_port = 0
{% endif %}

## set the heartbeat port [default: random]
{% if jupyter_notebook_connectionfilemixin_hb_port is defined %}
c.ConnectionFileMixin.hb_port = {{ jupyter_notebook_connectionfilemixin_hb_port }}
{% else %}
#c.ConnectionFileMixin.hb_port = 0
{% endif %}

## set the iopub (PUB) port [default: random]
{% if jupyter_notebook_connectionfilemixin_iopub_port is defined %}
c.ConnectionFileMixin.iopub_port = {{ jupyter_notebook_connectionfilemixin_iopub_port }}
{% else %}
#c.ConnectionFileMixin.iopub_port = 0
{% endif %}

## Set the kernel's IP address [default localhost]. If the IP address is
#  something other than localhost, then Consoles on other machines will be able
#  to connect to the Kernel, so be careful!
{% if jupyter_notebook_connectionfilemixin_ip is defined %}
c.ConnectionFileMixin.ip = '{{ jupyter_notebook_connectionfilemixin_ip }}'
{% else %}
#c.ConnectionFileMixin.ip = ''
{% endif %}

## set the shell (ROUTER) port [default: random]
{% if jupyter_notebook_connectionfilemixin_shell_port is defined %}
c.ConnectionFileMixin.shell_port = {{ jupyter_notebook_connectionfilemixin_shell_port }}
{% else %}
#c.ConnectionFileMixin.shell_port = 0
{% endif %}

## set the stdin (ROUTER) port [default: random]
{% if jupyter_notebook_connectionfilemixin_stdin_port is defined %}
c.ConnectionFileMixin.stdin_port = {{ jupyter_notebook_connectionfilemixin_stdin_port }}
{% else %}
#c.ConnectionFileMixin.stdin_port = 0
{% endif %}

## 
{% if jupyter_notebook_connectionfilemixin_transport is defined %}
c.ConnectionFileMixin.transport = '{{ jupyter_notebook_connectionfilemixin_transport }}'
{% else %}
#c.ConnectionFileMixin.transport = 'tcp'
{% endif %}

#------------------------------------------------------------------------------
# KernelManager(ConnectionFileMixin) configuration
#------------------------------------------------------------------------------

## Manages a single kernel in a subprocess on this host.
#  
#  This version starts kernels with Popen.

## Should we autorestart the kernel if it dies.
{% if jupyter_notebook_kernelmanager_autorestart is defined %}
c.KernelManager.autorestart = {{ jupyter_notebook_kernelmanager_autorestart | bool }}
{% else %}
#c.KernelManager.autorestart = True
{% endif %}

## DEPRECATED: Use kernel_name instead.
#  
#  The Popen Command to launch the kernel. Override this if you have a custom
#  kernel. If kernel_cmd is specified in a configuration file, Jupyter does not
#  pass any arguments to the kernel, because it cannot make any assumptions about
#  the arguments that the kernel understands. In particular, this means that the
#  kernel does not receive the option --debug if it given on the Jupyter command
#  line.
{% if jupyter_notebook_kernelmanager_kernel_cmd is defined %}
c.KernelManager.kernel_cmd = {{ jupyter_notebook_kernelmanager_kernel_cmd }}
{% else %}
#c.KernelManager.kernel_cmd = []
{% endif %}

## Time to wait for a kernel to terminate before killing it, in seconds.
{% if jupyter_notebook_kernelmanager_shutdown_wait_time is defined %}
c.KernelManager.shutdown_wait_time = {{ jupyter_notebook_kernelmanager_shutdown_wait_time }}
{% else %}
#c.KernelManager.shutdown_wait_time = 5.0
{% endif %}

#------------------------------------------------------------------------------
# Session(Configurable) configuration
#------------------------------------------------------------------------------

## Object for handling serialization and sending of messages.
#  
#  The Session object handles building messages and sending them with ZMQ sockets
#  or ZMQStream objects.  Objects can communicate with each other over the
#  network via Session objects, and only need to work with the dict-based IPython
#  message spec. The Session will handle serialization/deserialization, security,
#  and metadata.
#  
#  Sessions support configurable serialization via packer/unpacker traits, and
#  signing with HMAC digests via the key/keyfile traits.
#  
#  Parameters ----------
#  
#  debug : bool
#      whether to trigger extra debugging statements
#  packer/unpacker : str : 'json', 'pickle' or import_string
#      importstrings for methods to serialize message parts.  If just
#      'json' or 'pickle', predefined JSON and pickle packers will be used.
#      Otherwise, the entire importstring must be used.
#  
#      The functions must accept at least valid JSON input, and output *bytes*.
#  
#      For example, to use msgpack:
#      packer = 'msgpack.packb', unpacker='msgpack.unpackb'
#  pack/unpack : callables
#      You can also set the pack/unpack callables for serialization directly.
#  session : bytes
#      the ID of this Session object.  The default is to generate a new UUID.
#  username : unicode
#      username added to message headers.  The default is to ask the OS.
#  key : bytes
#      The key used to initialize an HMAC signature.  If unset, messages
#      will not be signed or checked.
#  keyfile : filepath
#      The file containing a key.  If this is set, `key` will be initialized
#      to the contents of the file.

## Threshold (in bytes) beyond which an object's buffer should be extracted to
#  avoid pickling.
{% if jupyter_notebook_session_buffer_threshold is defined %}
c.Session.buffer_threshold = {{ jupyter_notebook_session_buffer_threshold }}
{% else %}
#c.Session.buffer_threshold = 1024
{% endif %}

## Whether to check PID to protect against calls after fork.
#  
#  This check can be disabled if fork-safety is handled elsewhere.
{% if jupyter_notebook_session_check_pid is defined %}
c.Session.check_pid = {{ jupyter_notebook_session_check_pid | bool }}
{% else %}
#c.Session.check_pid = True
{% endif %}

## Threshold (in bytes) beyond which a buffer should be sent without copying.
{% if jupyter_notebook_session_copy_threshold is defined %}
c.Session.copy_threshold = {{ jupyter_notebook_session_copy_threshold }}
{% else %}
#c.Session.copy_threshold = 65536
{% endif %}

## Debug output in the Session
{% if jupyter_notebook_session_debug is defined %}
c.Session.debug = {{ jupyter_notebook_session_debug | bool }}
{% else %}
#c.Session.debug = False
{% endif %}

## The maximum number of digests to remember.
#  
#  The digest history will be culled when it exceeds this value.
{% if jupyter_notebook_session_digest_history_size is defined %}
c.Session.digest_history_size = {{ jupyter_notebook_session_digest_history_size }}
{% else %}
#c.Session.digest_history_size = 65536
{% endif %}

## The maximum number of items for a container to be introspected for custom
#  serialization. Containers larger than this are pickled outright.
{% if jupyter_notebook_session_item_threshold is defined %}
c.Session.item_threshold = {{ jupyter_notebook_session_item_threshold }}
{% else %}
#c.Session.item_threshold = 64
{% endif %}

## execution key, for signing messages.
{% if jupyter_notebook_session_key is defined %}
c.Session.key = b'{{ jupyter_notebook_session_key }}'
{% else %}
#c.Session.key = b''
{% endif %}

## path to file containing execution key.
{% if jupyter_notebook_session_key is defined %}
c.Session.key = b'{{ jupyter_notebook_session_key }}'
{% else %}
#c.Session.key = b''
{% endif %}

## Metadata dictionary, which serves as the default top-level metadata dict for
#  each message.
{% if jupyter_notebook_session_metadata is defined %}
c.Session.metadata = {{ jupyter_notebook_session_metadata }}
{% else %}
#c.Session.metadata = {}
{% endif %}

## The name of the packer for serializing messages. Should be one of 'json',
#  'pickle', or an import name for a custom callable serializer.
{% if jupyter_notebook_session_packer is defined %}
c.Session.packer = '{{ jupyter_notebook_session_packer }}'
{% else %}
#c.Session.packer = 'json'
{% endif %}

## The UUID identifying this session.
{% if jupyter_notebook_session_session is defined %}
c.Session.session = '{{ jupyter_notebook_session_session }}'
{% else %}
#c.Session.session = ''
{% endif %}

## The digest scheme used to construct the message signatures. Must have the form
#  'hmac-HASH'.
{% if jupyter_notebook_session_signature_scheme is defined %}
c.Session.signature_scheme = '{{ jupyter_notebook_session_signature_scheme }}'
{% else %}
#c.Session.signature_scheme = 'hmac-sha256'
{% endif %}

## The name of the unpacker for unserializing messages. Only used with custom
#  functions for `packer`.
{% if jupyter_notebook_session_unpacker is defined %}
c.Session.unpacker = '{{ jupyter_notebook_session_unpacker }}'
{% else %}
#c.Session.unpacker = 'json'
{% endif %}

## Username for the Session. Default is your system username.
{% if jupyter_notebook_session_username is defined %}
c.Session.username = '{{ jupyter_notebook_session_username }}'
{% else %}
#c.Session.username = 'ubuntu'
{% endif %}

#------------------------------------------------------------------------------
# MultiKernelManager(LoggingConfigurable) configuration
#------------------------------------------------------------------------------

## A class for managing multiple kernels.

## The name of the default kernel to start
{% if jupyter_notebook_multikernelmanager_default_kernel_name is defined %}
c.MultiKernelManager.default_kernel_name = '{{ jupyter_notebook_multikernelmanager_default_kernel_name }}'
{% else %}
#c.MultiKernelManager.default_kernel_name = 'python3'
{% endif %}

## The kernel manager class.  This is configurable to allow subclassing of the
#  KernelManager for customized behavior.
{% if jupyter_notebook_multikernelmanager_kernel_manager_class is defined %}
c.MultiKernelManager.kernel_manager_class = '{{ jupyter_notebook_multikernelmanager_kernel_manager_class }}'
{% else %}
#c.MultiKernelManager.kernel_manager_class = 'jupyter_client.ioloop.IOLoopKernelManager'
{% endif %}

#------------------------------------------------------------------------------
# MappingKernelManager(MultiKernelManager) configuration
#------------------------------------------------------------------------------

## A KernelManager that handles notebook mapping and HTTP error handling

## Whether messages from kernels whose frontends have disconnected should be
#  buffered in-memory.
#  
#  When True (default), messages are buffered and replayed on reconnect, avoiding
#  lost messages due to interrupted connectivity.
#  
#  Disable if long-running kernels will produce too much output while no
#  frontends are connected.
{% if jupyter_notebook_mappingkernelmanager_buffer_offline_messages is defined %}
c.MappingKernelManager.buffer_offline_messages = {{ jupyter_notebook_mappingkernelmanager_buffer_offline_messages | bool }}
{% else %}
#c.MappingKernelManager.buffer_offline_messages = True
{% endif %}

## Whether to consider culling kernels which are busy. Only effective if
#  cull_idle_timeout is not 0.
{% if jupyter_notebook_mappingkernelmanager_cull_busy is defined %}
c.MappingKernelManager.cull_busy = {{ jupyter_notebook_mappingkernelmanager_cull_busy | bool }}
{% else %}
#c.MappingKernelManager.cull_busy = False
{% endif %}

## Whether to consider culling kernels which have one or more connections. Only
#  effective if cull_idle_timeout is not 0.
{% if jupyter_notebook_mappingkernelmanager_cull_connected is defined %}
c.MappingKernelManager.cull_connected = {{ jupyter_notebook_mappingkernelmanager_cull_connected | bool }}
{% else %}
#c.MappingKernelManager.cull_connected = False
{% endif %}

## Timeout (in seconds) after which a kernel is considered idle and ready to be
#  culled.  Values of 0 or lower disable culling. The minimum timeout is 300
#  seconds (5 minutes). Positive values less than the minimum value will be set
#  to the minimum.
{% if jupyter_notebook_mappingkernelmanager_cull_idle_timeout is defined %}
c.MappingKernelManager.cull_idle_timeout = {{ jupyter_notebook_mappingkernelmanager_cull_idle_timeout }}
{% else %}
#c.MappingKernelManager.cull_idle_timeout = 0
{% endif %}

## The interval (in seconds) on which to check for idle kernels exceeding the
#  cull timeout value.
{% if jupyter_notebook_mappingkernelmanager_cull_interval is defined %}
c.MappingKernelManager.cull_interval = {{ jupyter_notebook_mappingkernelmanager_cull_interval }}
{% else %}
#c.MappingKernelManager.cull_interval = 300
{% endif %}

## 
{% if jupyter_notebook_mappingkernelmanager_root_dir is defined %}
c.MappingKernelManager.root_dir = '{{ jupyter_notebook_mappingkernelmanager_root_dir }}'
{% else %}
#c.MappingKernelManager.root_dir = ''
{% endif %}

#------------------------------------------------------------------------------
# ContentsManager(LoggingConfigurable) configuration
#------------------------------------------------------------------------------

## Base class for serving files and directories.
#  
#  This serves any text or binary file, as well as directories, with special
#  handling for JSON notebook documents.
#  
#  Most APIs take a path argument, which is always an API-style unicode path, and
#  always refers to a directory.
#  
#  - unicode, not url-escaped
#  - '/'-separated
#  - leading and trailing '/' will be stripped
#  - if unspecified, path defaults to '',
#    indicating the root path.

## 
{% if jupyter_notebook_contentsmanager_checkpoints is defined %}
c.ContentsManager.checkpoints = '{{ jupyter_notebook_contentsmanager_checkpoints }}'
{% else %}
#c.ContentsManager.checkpoints = None
{% endif %}

## 
{% if jupyter_notebook_contentsmanager_checkpoints is defined %}
c.ContentsManager.checkpoints = '{{ jupyter_notebook_contentsmanager_checkpoints }}'
{% else %}
#c.ContentsManager.checkpoints = None
{% endif %}

## 
{% if jupyter_notebook_contentsmanager_checkpoints is defined %}
c.ContentsManager.checkpoints = '{{ jupyter_notebook_contentsmanager_checkpoints }}'
{% else %}
#c.ContentsManager.checkpoints = None
{% endif %}

## handler class to use when serving raw file requests.
#  
#  Default is a fallback that talks to the ContentsManager API, which may be
#  inefficient, especially for large files.
#  
#  Local files-based ContentsManagers can use a StaticFileHandler subclass, which
#  will be much more efficient.
#  
#  Access to these files should be Authenticated.
{% if jupyter_notebook_contentsmanager_files_handler_class is defined %}
c.ContentsManager.files_handler_class = '{{ jupyter_notebook_contentsmanager_files_handler_class }}'
{% else %}
#c.ContentsManager.files_handler_class = 'notebook.files.handlers.FilesHandler'
{% endif %}

## Extra parameters to pass to files_handler_class.
#  
#  For example, StaticFileHandlers generally expect a `path` argument specifying
#  the root directory from which to serve files.
{% if jupyter_notebook_contentsmanager_files_handler_params is defined %}
c.ContentsManager.files_handler_params = {{ jupyter_notebook_contentsmanager_files_handler_params }}
{% else %}
#c.ContentsManager.files_handler_params = {}
{% endif %}

## Glob patterns to hide in file and directory listings.
{% if jupyter_notebook_contentsmanager_hide_globs is defined %}
c.ContentsManager.hide_globs = [{{ jupyter_notebook_contentsmanager_hide_globs | map('quote') | join(', ') }}]
{% else %}
#c.ContentsManager.hide_globs = ['__pycache__', '*.pyc', '*.pyo', '.DS_Store', '*.so', '*.dylib', '*~']
{% endif %}

## Python callable or importstring thereof
#  
#  To be called on a contents model prior to save.
#  
#  This can be used to process the structure, such as removing notebook outputs
#  or other side effects that should not be saved.
#  
#  It will be called as (all arguments passed by keyword)::
#  
#      hook(path=path, model=model, contents_manager=self)
#  
#  - model: the model to be saved. Includes file contents.
#    Modifying this dict will affect the file that is stored.
#  - path: the API path of the save destination
#  - contents_manager: this ContentsManager instance
{% if jupyter_notebook_contentsmanager_pre_save_hook is defined %}
c.ContentsManager.pre_save_hook = {{ jupyter_notebook_contentsmanager_pre_save_hook }}
{% else %}
#c.ContentsManager.pre_save_hook = None
{% endif %}

## 
{% if jupyter_notebook_contentsmanager_root_dir is defined %}
c.ContentsManager.root_dir = '{{ jupyter_notebook_contentsmanager_root_dir }}'
{% else %}
#c.ContentsManager.root_dir = '/'
{% endif %}

## The base name used when creating untitled directories.
{% if jupyter_notebook_contentsmanager_untitled_directory is defined %}
c.ContentsManager.untitled_directory = '{{ jupyter_notebook_contentsmanager_untitled_directory }}'
{% else %}
#c.ContentsManager.untitled_directory = 'Untitled Folder'
{% endif %}

## The base name used when creating untitled files.
{% if jupyter_notebook_contentsmanager_untitled_file is defined %}
c.ContentsManager.untitled_file = '{{ jupyter_notebook_contentsmanager_untitled_file }}'
{% else %}
#c.ContentsManager.untitled_file = 'untitled'
{% endif %}

## The base name used when creating untitled notebooks.
{% if jupyter_notebook_contentsmanager_untitled_notebook is defined %}
c.ContentsManager.untitled_notebook = '{{ jupyter_notebook_contentsmanager_untitled_notebook }}'
{% else %}
#c.ContentsManager.untitled_notebook = 'Untitled'
{% endif %}

#------------------------------------------------------------------------------
# FileManagerMixin(Configurable) configuration
#------------------------------------------------------------------------------

## Mixin for ContentsAPI classes that interact with the filesystem.
#  
#  Provides facilities for reading, writing, and copying both notebooks and
#  generic files.
#  
#  Shared by FileContentsManager and FileCheckpoints.
#  
#  Note ---- Classes using this mixin must provide the following attributes:
#  
#  root_dir : unicode
#      A directory against against which API-style paths are to be resolved.
#  
#  log : logging.Logger

## By default notebooks are saved on disk on a temporary file and then if
#  succefully written, it replaces the old ones. This procedure, namely
#  'atomic_writing', causes some bugs on file system whitout operation order
#  enforcement (like some networked fs). If set to False, the new notebook is
#  written directly on the old one which could fail (eg: full filesystem or quota
#  )
{% if jupyter_notebook_filemanagermixin_use_atomic_writing is defined %}
c.FileManagerMixin.use_atomic_writing = {{ jupyter_notebook_filemanagermixin_use_atomic_writing | bool }}
{% else %}
#c.FileManagerMixin.use_atomic_writing = True
{% endif %}

#------------------------------------------------------------------------------
# FileContentsManager(FileManagerMixin,ContentsManager) configuration
#------------------------------------------------------------------------------

## Python callable or importstring thereof
#  
#  to be called on the path of a file just saved.
#  
#  This can be used to process the file on disk, such as converting the notebook
#  to a script or HTML via nbconvert.
#  
#  It will be called as (all arguments passed by keyword)::
#  
#      hook(os_path=os_path, model=model, contents_manager=instance)
#  
#  - path: the filesystem path to the file just written - model: the model
#  representing the file - contents_manager: this ContentsManager instance
{% if jupyter_notebook_filecontentsmanager_post_save_hook is defined %}
c.FileContentsManager.post_save_hook = {{ jupyter_notebook_filecontentsmanager_post_save_hook }}
{% else %}
#c.FileContentsManager.post_save_hook = None
{% endif %}

## 
{% if jupyter_notebook_filecontentsmanager_root_dir is defined %}
c.FileContentsManager.root_dir = '{{ jupyter_notebook_filecontentsmanager_root_dir }}'
{% else %}
#c.FileContentsManager.root_dir = ''
{% endif %}

## DEPRECATED, use post_save_hook. Will be removed in Notebook 5.0
{% if jupyter_notebook_filecontentsmanager_save_script is defined %}
c.FileContentsManager.save_script = {{ jupyter_notebook_filecontentsmanager_save_script }}
{% else %}
#c.FileContentsManager.save_script = False
{% endif %}

#------------------------------------------------------------------------------
# NotebookNotary(LoggingConfigurable) configuration
#------------------------------------------------------------------------------

## A class for computing and verifying notebook signatures.

## The hashing algorithm used to sign notebooks.
{% if jupyter_notebook_notebooknotary_algorithm is defined %}
c.NotebookNotary.algorithm = '{{ jupyter_notebook_notebooknotary_algorithm }}'
{% else %}
#c.NotebookNotary.algorithm = 'sha256'
{% endif %}

## The sqlite file in which to store notebook signatures. By default, this will
#  be in your Jupyter data directory. You can set it to ':memory:' to disable
#  sqlite writing to the filesystem.
{% if jupyter_notebook_notebooknotary_db_file is defined %}
c.NotebookNotary.db_file = '{{ jupyter_notebook_notebooknotary_db_file }}'
{% else %}
#c.NotebookNotary.db_file = ''
{% endif %}

## The secret key with which notebooks are signed.
{% if jupyter_notebook_notebooknotary_secret is defined %}
c.NotebookNotary.secret = b'{{ jupyter_notebook_notebooknotary_secret }}'
{% else %}
#c.NotebookNotary.secret = b''
{% endif %}

## The file where the secret key is stored.
{% if jupyter_notebook_notebooknotary_secret is defined %}
c.NotebookNotary.secret = b'{{ jupyter_notebook_notebooknotary_secret }}'
{% else %}
#c.NotebookNotary.secret = b''
{% endif %}

## A callable returning the storage backend for notebook signatures. The default
#  uses an SQLite database.
{% if jupyter_notebook_notebooknotary_store_factory is defined %}
c.NotebookNotary.store_factory = {{ jupyter_notebook_notebooknotary_store_factory }}
{% else %}
#c.NotebookNotary.store_factory = traitlets.Undefined
{% endif %}

#------------------------------------------------------------------------------
# KernelSpecManager(LoggingConfigurable) configuration
#------------------------------------------------------------------------------

## If there is no Python kernelspec registered and the IPython kernel is
#  available, ensure it is added to the spec list.
{% if jupyter_notebook_kernelspecmanager_ensure_native_kernel is defined %}
c.KernelSpecManager.ensure_native_kernel = {{ jupyter_notebook_kernelspecmanager_ensure_native_kernel | bool }}
{% else %}
#c.KernelSpecManager.ensure_native_kernel = True
{% endif %}

## The kernel spec class.  This is configurable to allow subclassing of the
#  KernelSpecManager for customized behavior.
{% if jupyter_notebook_kernelspecmanager_kernel_spec_class is defined %}
c.KernelSpecManager.kernel_spec_class = '{{ jupyter_notebook_kernelspecmanager_kernel_spec_class }}'
{% else %}
#c.KernelSpecManager.kernel_spec_class = 'jupyter_client.kernelspec.KernelSpec'
{% endif %}

## Whitelist of allowed kernel names.
#  
#  By default, all installed kernels are allowed.
{% if jupyter_notebook_kernelspecmanager_whitelist is defined %}
c.KernelSpecManager.whitelist = set({{ jupyter_notebook_kernelspecmanager_whitelist }})
{% else %}
#c.KernelSpecManager.whitelist = set()
{% endif %}
